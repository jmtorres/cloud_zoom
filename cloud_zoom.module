<?php
// $Id$

/**
 * @file
 * This module integrates the Cloud Zoom JQuery library from:
 * http://www.professorcloud.com/mainsite/cloud-zoom.htm
 */


/**
 * Implementation of hook_requirements().
 */
function cloud_zoom_requirements($phase) {
  if ($phase == 'runtime') {
    $files_present = _cloud_zoom_files_present();

    return array(
      'cloud_zoom_sourcefiles' => array(
        'title' => t('Cloud Zoom - Sourcecode downloaded and present'),
        'value' => $files_present ? t('Files Present') : t('Files Missing'),
        'description' => $files_present ? NULL : t('Have the sourcecode files for Cloud Zoom been downloaded from <a href="http://www.professorcloud.com/mainsite/cloud-zoom.htm">Professor Cloud</a>'),
        'severity' => $files_present ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ),
    );
  }
}


/**
 * Internal Helper function to check if the required source code is present
 */
function _cloud_zoom_files_present() {
  $path = libraries_get_path('cloudzoom');
  return (file_exists($path .'/cloudzoom.js') && file_exists($path .'/cloudzoom.css'));
}


/**
 * Implementation of hook_field_formatter().
 */
function cloud_zoom_field_formatter_info() {
  $formatter_settings = array(
    'cloud_zoom_display_style' => '',
    'cloud_zoom_zoom_style' => '',
    'cloud_zoom_tint_color' => '#FFF',
    'cloud_zoom_tint_opacity' => '0.25',
    'cloud_zoom_animation_time' => '500',
    'cloud_zoom_lens_class' => 'cloudzoom-lens',
    'cloud_zoom_zoom_position' => '3',
    'cloud_zoom_zoom_offset_x' => '15',
    'cloud_zoom_zoom_offset_y' => '0',
    'cloud_zoom_zoom_fly_out' => TRUE,
    'cloud_zoom_zoom_class' => 'cloudzoom-zoom',
    'cloud_zoom_zoom_inside_class' => 'cloudzoom-zoom-inside',
    'cloud_zoom_zoom_size_mode' => 'lens',
    'cloud_zoom_caption_source' => 'title',
    'cloud_zoom_caption_type' => 'attr',
    'cloud_zoom_caption_position' => 'top',
    'cloud_zoom_variable_magnification' => TRUE,
    'cloud_zoom_start_magnification' => 'auto',
    'cloud_zoom_min_magnification' => 'auto',
    'cloud_zoom_max_magnification' => 'auto',
    'cloud_zoom_easing' => '8',
    'cloud_zoom_lazy_load_zoom' => FALSE,
    'cloud_zoom_mouse_trigger_event' => 'mousemove',
    'cloud_zoom_disable_zoom' => FALSE,
    'cloud_zoom_disable_on_screen_width' => '0',
    'cloud_zoom_gallery_fade' => TRUE,
    'cloud_zoom_gallery_hover_delay' => '200',
    'cloud_zoom_perma_zoom' => FALSE,
    'cloud_zoom_zoom_width' => '0',
    'cloud_zoom_zoom_height' => '0',
    'cloud_zoom_lens_width' => '0',
    'cloud_zoom_lens_height' => '0',
    'cloud_zoom_hover_intent_delay' => '0',
    'cloud_zoom_auto_inside' => '0',
    'cloud_zoom_touch_start_delay' => '0',
  );

  $formatters = array(
    'cloud_zoom' => array(
      'label' => t('Cloud Zoom'),
      'field types' => array('image'),
      'settings' => $formatter_settings,
    ),
    'cloud_zoom_gallery' => array(
      'label' => t('Cloud Zoom Gallery'),
      'field types' => array('image'),
      'settings' => $formatter_settings + array(
        'cloud_zoom_thumbnail_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cloud_zoom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['cloud_zoom_display_style'] = array(
    '#type' => 'select',
    '#title' => t('Display image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['cloud_zoom_display_style'],
  );

  $element['cloud_zoom_zoom_style'] = array(
    '#type' => 'select',
    '#title' => t('Zoomed image style'),
    '#options' => $image_styles,
    '#empty_option' => t('None (original image)'),
    '#default_value' => $settings['cloud_zoom_zoom_style'],
  );

  if ($display['type'] == 'cloud_zoom_gallery') {
    $element['cloud_zoom_thumbnail_style'] = array(
      '#type' => 'select',
      '#title' => t('Thumbnail image style'),
      '#options' => $image_styles,
      '#empty_option' => t('None (original image)'),
      '#default_value' => $settings['cloud_zoom_thumbnail_style'],
    );

  }
  $element['cloud_zoom_tint_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Tint Color'),
    '#description' => t('Color to use for the tint effect'),
    '#default_value' => $settings['cloud_zoom_tint_color'],
  );

  $element['cloud_zoom_tint_opacity'] = array(
    '#type' => 'textfield',
    '#title' => t('Tint Opacity'),
    '#description' => t('Opacity of tint 0-1. If zero, no tint will be visible.'),
    '#default_value' => $settings['cloud_zoom_tint_opacity'],
  );

  $element['cloud_zoom_animation_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Animation Time'),
    '#description' => t('Duration of the animation effects in milliseconds.'),
    '#default_value' => $settings['cloud_zoom_animation_time'],
  );

  $element['cloud_zoom_lens_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Lens Class'),
    '#description' => t('CSS class to use for lens.'),
    '#default_value' => $settings['cloud_zoom_lens_class'],
  );

  $element['cloud_zoom_zoom_position'] = array(
    '#type' => 'select',
    '#title' => t('Zoom Position'),
    '#option' => array(
      '0' => t('Top Center'),
      '1' => t('Top Right'),
      '2' => t('Top Right Corner'),
      '3' => t('Right Top'),
      '4' => t('Right Center'),
      '5' => t('Right Bottom'),
      '6' => t('Bottom Right Corner'),
      '7' => t('Bottom Right'),
      '8' => t('Bottom Center'),
      '9' => t('Bottom Left'),
      '10' => t('Bottom Left Corner'),
      '11' => t('Left Bottom'),
      '12' => t('Left Center'),
      '13' => t('Left Top'),
      '14' => t('Top Left'),
      '15' => t('Top Left Corner'),
    ),
    '#default_value' => $settings['cloud_zoom_zoom_position'],
  );

  $element['cloud_zoom_zoom_offset_x'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Offset X'),
    '#default_value' => $settings['cloud_zoom_zoom_offset_x'],
  );

  $element['cloud_zoom_zoom_offset_y'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Offset Y'),
    '#default_value' => $settings['cloud_zoom_zoom_offset_y'],
  );

  $element['cloud_zoom_zoom_fly_out'] = array(
    '#type' => 'checkbox',
    '#title' => t('Zoom Fly Out'),
    '#default_value' => $settings['cloud_zoom_zoom_fly_out'],
  );

  $element['cloud_zoom_zoom_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Class'),
    '#default_value' => $settings['cloud_zoom_zoom_class'],
  );

  $element['cloud_zoom_zoom_inside_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Inside Class'),
    '#default_value' => $settings['cloud_zoom_zoom_inside_class'],
  );

  $element['cloud_zoom_zoom_size_mode'] = array(
    '#type' => 'select',
    '#title' => t('Zoom Size Mode'),
    '#options' => array(
      'lens' => t('Lens'),
      'zoom' => t('Zoom'),
      'full' => t('Full'),
      'image' => t('Image'),
    ),
    '#default_value' => $settings['cloud_zoom_zoom_size_mode'],
  );

  $element['cloud_zoom_caption_source'] = array(
    '#type' => 'textfield',
    '#title' => t('Caption Source'),
    '#default_value' => $settings['cloud_zoom_caption_source'],
  );

  $element['cloud_zoom_caption_type'] = array(
    '#type' => 'select',
    '#title' => t('Caption Type'),
    '#options' => array(
      'attr' => 'attr',
      'html' => 'html',
    ),
    '#default_value' => $settings['cloud_zoom_caption_type'],
  );

  $element['cloud_zoom_caption_position'] = array(
    '#type' => 'text',
    '#title' => t('Caption Position'),
    '#options' => array(
      'top' => t('Top'),
      'bottom' => t('Bottom'),
    ),
    '#default_value' => $settings['cloud_zoom_caption_position'],
  );

  $element['cloud_zoom_variable_magnification'] = array(
    '#type' => 'checkbox',
    '#title' => t('Variable Magnification'),
    '#default_value' => $settings['cloud_zoom_variable_magnification'],
  );

  $element['cloud_zoom_start_magnification'] = array(
    '#type' => 'textfield',
    '#title' => t('Start Magnification'),
    '#default_value' => $settings['cloud_zoom_start_magnification'],
  );

  $element['cloud_zoom_min_magnification'] = array(
    '#type' => 'textfield',
    '#title' => t('Min Magnification'),
    '#default_value' => $settings['cloud_zoom_min_magnification'],
  );

  $element['cloud_zoom_max_magnification'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Magnification'),
    '#default_value' => $settings['cloud_zoom_max_magnification'],
  );

  $element['cloud_zoom_easing'] = array(
    '#type' => 'textfield',
    '#title' => t('Easing'),
    '#default_value' => $settings['cloud_zoom_easing'],
  );

  $element['cloud_zoom_lazy_load_zoom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Lazy Load Zoom'),
    '#default_value' => $settings['cloud_zoom_lazy_load_zoom'],
  );

  $element['cloud_zoom_mouse_trigger_event'] = array(
    '#type' => 'select',
    '#title' => t('Mouse Trigger Event'),
    '#options' => array(
      'mousemove' => t('Mouse Move'),
      'click' => t('Click'),
    ),
    '#default_value' => $settings['cloud_zoom_mouse_trigger_event'],
  );

  $element['cloud_zoom_disable_zoom'] = array(
    '#type' => 'select',
    '#title' => t('Disable Zoom'),
    '#options' => array(
      'false' => t('No'),
      'true' => t('Yes'),
      'auto' => t('Auto'),
      'min_width' => t('Minimum Width'),
    ),
    '#default_value' => $settings['cloud_zoom_disable_zoom'],
  );

  $element['cloud_zoom_disable_on_screen_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Disable On Screen Width'),
    '#default_value' => $settings['cloud_zoom_disable_on_screen_width'],
    '#states' => array(
      'visible' => array(
        ':input[name="cloud_zoom_disable_zoom"]' => array('value' => 'min_width'),
      ),
    ),
  );

  $element['cloud_zoom_gallery_fade'] = array(
    '#type' => 'checkbox',
    '#title' => t('Gallery Fade'),
    '#default_value' => $settings['cloud_zoom_gallery_fade'],
  );

  $element['cloud_zoom_gallery_hover_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Gallery Hover Delay'),
    '#default_value' => $settings['cloud_zoom_gallery_hover_delay'],
  );

  $element['cloud_zoom_perma_zoom'] = array(
    '#type' => 'checkbox',
    '#title' => t('Perma Zoom'),
    '#default_value' => $settings['cloud_zoom_perma_zoom'],
  );

  $element['cloud_zoom_zoom_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Width'),
    '#default_value' => $settings['cloud_zoom_zoom_width'],
  );

  $element['cloud_zoom_zoom_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Height'),
    '#default_value' => $settings['cloud_zoom_zoom_height'],
  );

  $element['cloud_zoom_lens_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Lens Width'),
    '#default_value' => $settings['cloud_zoom_lens_width'],
  );

  $element['cloud_zoom_lens_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Lens Height'),
    '#default_value' => $settings['cloud_zoom_lens_height'],
  );

  $element['cloud_zoom_hover_intent_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Hover Intent Delay'),
    '#default_value' => $settings['cloud_zoom_hover_intent_delay'],
  );

  $element['cloud_zoom_auto_inside'] = array(
    '#type' => 'textfield',
    '#title' => t('Auto Inside'),
    '#default_value' => $settings['cloud_zoom_auto_inside'],
  );

  $element['cloud_zoom_touch_start_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Touch Start Delay'),
    '#default_value' => $settings['cloud_zoom_touch_start_delay'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cloud_zoom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that define
  // their styles in code.
  $summary[] = t('Display image style: @style', array(
    '@style' => isset($image_styles[$settings['cloud_zoom_display_style']]) ?
    $image_styles[$settings['cloud_zoom_display_style']] : 'original',
  ));
  $summary[] = t('Zoomed image style: @style', array(
    '@style' => isset($image_styles[$settings['cloud_zoom_zoom_style']]) ?
    $image_styles[$settings['cloud_zoom_zoom_style']] : 'original',
  ));
  if ($display['type'] == 'cloud_zoom_gallery') {
    $summary[] = t('Thumbnail image style: @style', array(
      '@style' => isset($image_styles[$settings['cloud_zoom_thumbnail_style']]) ?
      $image_styles[$settings['cloud_zoom_thumbnail_style']] : 'original',
    ));
  }

  $form = cloud_zoom_field_formatter_settings_form(
    $field,
    $instance,
    $view_mode,
    $form = array(),
    $form_state = array());

  $summary = array();
  switch ($display['type']) {
    case 'cloud_zoom':
      foreach ($settings as $key => $setting) {
        if (is_numeric($setting)) {
          $setting = ($setting) ? 'Yes' : 'No';
        }
        $summary[] = t('@key: @setting', array(
          '@key' => $form[$key]['#title'],
          '@setting' => $setting,
        ));
      }

      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function cloud_zoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $display_style = $display['settings']['cloud_zoom_display_style'];
  $zoom_style = $display['settings']['cloud_zoom_zoom_style'];
  $settings = &$display['settings'];

  switch($display['type']) {
    case 'cloud_zoom':
      // Build elements for each item
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'cloud_zoom_image',
          '#item' => $item,
          '#settings' => array(
            'image_style' => $settings['cloud_zoom_display_style'],
            'zoom_style' => $settings['cloud_zoom_zoom_style'],
            'tintColor' => $settings['cloud_zoom_tint_color'],
            'tintOpacity' => $settings['cloud_zoom_tint_opacity'],
            'animationTime' => $settings['cloud_zoom_animation_time'],
            'lensClass' => $settings['cloud_zoom_lens_class'],
            'zoomPosition' => $settings['cloud_zoom_zoom_position'],
            'zoomOffsetX' => $settings['cloud_zoom_zoom_offset_x'],
            'zoomOffsetY' => $settings['cloud_zoom_zoom_offset_y'],
            'zoomFlyOut' => $settings['cloud_zoom_zoom_fly_out'],
            'zoomClass' => $settings['cloud_zoom_zoom_class'],
            'zoomInsideClass' => $settings['cloud_zoom_zoom_inside_class'],
            'zoomSizeMode' => $settings['cloud_zoom_zoom_size_mode'],
            'captionSource' => $settings['cloud_zoom_caption_source'],
            'captionType' => $settings['cloud_zoom_caption_type'],
            'captionPosition' => $settings['cloud_zoom_caption_position'],
            'variableMagnification' => $settings['cloud_zoom_variable_magnification'],
            'startMagnification' => $settings['cloud_zoom_start_magnification'],
            'minMagnification' => $settings['cloud_zoom_min_magnification'],
            'maxMagnification' => $settings['cloud_zoom_max_magnification'],
            'easing' => $settings['cloud_zoom_easing'],
            'lazyLoadZoom' => $settings['cloud_zoom_lazy_load_zoom'],
            'mouseTriggerEvent' => $settings['cloud_zoom_mouse_trigger_event'],
            'disableZoom' => $settings['cloud_zoom_disable_zoom'],
            'disableOnScreenWidth' => $settings['cloud_zoom_disable_on_screenWidth'],
            'galleryFade' => $settings['cloud_zoom_gallery_fade'],
            'galleryHoverDelay' => $settings['cloud_zoom_gallery_hover_delay'],
            'permaZoom' => $settings['cloud_zoom_perma_zoom'],
            'zoomWidth' => $settings['cloud_zoom_zoom_width'],
            'zoomHeight' => $settings['cloud_zoom_zoom_height'],
            'lensWidth' => $settings['cloud_zoom_lens_width'],
            'lensHeight' => $settings['cloud_zoom_lens_height'],
            'hoverIntentDelay' => $settings['cloud_zoom_hover_intent_delay'],
            'autoInside' => $settings['cloud_zoom_auto_inside'],
            'touchStartDelay' => $settings['cloud_zoom_touch_start_delay'],
          ),
        );
      }
    break;
    case 'cloud_zoom_gallery':
      $id = drupal_html_id('cloud-zoom-gallery');
      $thumbnail_style = $display['settings']['cloud_zoom_thumbnail_style'];
      $gallery_image = $items[0];
      $gallery_image['attributes']['id'] = $id;
      $gallery['gallery'] = array(
        '#theme' => 'cloud_zoom_image',
        '#item' => $gallery_image,
        '#image_style' => $display_style,
        '#zoom_style' => $zoom_style,
      );
      if(count($items) > 1) {
        foreach ($items as $delta => $item) {
          $zoom_image = image_style_url($zoom_style, $item['uri']);
          $item['attributes']['data-cloudzoom'] = cloud_zoom_data_encode(
            array(
              'useZoom' => '#' . $id,
              'image' => image_style_url($display_style, $item['uri']),
              'zoomImage' => $zoom_image,
              'galleryEvent' => 'mouseover',
            )
          );
          $item['attributes']['class'][] =  'cloudzoom-gallery';
          $gallery[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => $item,
            '#image_style' => $thumbnail_style,
          );
        }
      }
      $element[] = $gallery;
    break;
  }

  return $element;
}

function cloud_zoom_add_library(){
  $path = libraries_get_path('jquery.actual');
  if (file_exists($path . '/jquery.actual.js')) drupal_add_js($path . '/jquery.actual.js');
  drupal_add_library('system', 'effects.scale');
  // Add the cloud zoom JS and CSS
  $library_path = libraries_get_path('cloudzoom');
  $module_path = drupal_get_path('module', 'cloud_zoom');
  drupal_add_js($library_path . '/cloudzoom.js');
  drupal_add_js($module_path .'/cloud_zoom.js');
  drupal_add_css($library_path . '/cloudzoom.css');
}

/**
 * Implementation of hook_theme().
 */
function cloud_zoom_theme() {
  // Define a base theme handler
  return array(
    'cloud_zoom_image' => array(
      'variables' => array('item' => NULL, 'settings' => NULL),
    ),
  );
}

/**
 * Theme handler for the cloud_zoom effect
 */
function theme_cloud_zoom_image($variables) {
  cloud_zoom_add_library();

  $item = &$variables['item'];

  $zoom_path = $variables['zoom_style'] ? image_style_url($variables['zoom_style'], $item['uri']) : file_create_url($item['uri']);

  $item['attributes']['class'][] = 'cloudzoom';
  $item['attributes']['data-cloudzoom'] = cloud_zoom_data_encode(
    $variables['settings'] +
    array(
      'zoomImage' => $zoom_path,
    )
  );

  return theme('image_formatter', $variables);
}

function cloud_zoom_data_encode($settings) {
  $data = array();
  foreach ($settings as $key => $setting) {
    if(is_numeric($setting)){
      $data[] = "$key:$setting";
    }
    else {
      $data[] = "$key:'$setting'";
    }
  }
  return implode($data, ', ');
}
