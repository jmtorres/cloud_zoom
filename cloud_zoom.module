<?php
// $Id$

/**
 * @file
 * This module integrates the Cloud Zoom JQuery library from:
 * http://www.professorcloud.com/mainsite/cloud-zoom.htm
 */


/**
 * Implementation of hook_requirements().
 */
function cloud_zoom_requirements($phase) {
  if ($phase == 'runtime') {
    $files_present = _cloud_zoom_files_present();

    return array(
      'cloud_zoom_sourcefiles' => array(
        'title' => t('Cloud Zoom - Sourcecode downloaded and present'),
        'value' => $files_present ? t('Files Present') : t('Files Missing'),
        'description' => $files_present ? NULL : t('Have the sourcecode files for Cloud Zoom been downloaded from <a href="http://www.professorcloud.com/mainsite/cloud-zoom.htm">Professor Cloud</a>'),
        'severity' => $files_present ? REQUIREMENT_OK : REQUIREMENT_ERROR,
      ),
    );
  }
}

/**
 * Internal Helper function to check if the required source code is present
 */
function _cloud_zoom_files_present() {
  $path = libraries_get_path('cloudzoom');
  return (file_exists($path .'/cloudzoom.js') && file_exists($path .'/cloudzoom.css'));
}

function _cloud_zoom_settings() {
  $settings = &drupal_static(__FUNCTION__);

  if (!isset($settings)) {
    $image_styles = image_style_options(FALSE);
    $settings = array(
      'cloud_zoom_display_style' => array(
        'key' => null,
        'type' => 'select',
        'title' => t('Display image style'),
        'options' => $image_styles,
        'empty_option' => t('None (original image)'),
        'default' => '',
      ),
      'cloud_zoom_zoom_style' => array(
        'key' => null,
        'type' => 'select',
        'title' => t('Zoomed image style'),
        'options' => $image_styles,
        'empty_option' => t('None (original image)'),
        'default' => '',
      ),
      'cloud_zoom_thumbnail_style' => array(
        'key' => null,
        'type' => 'select',
        'title' => t('Thumbnail image style'),
        'options' => $image_styles,
        'empty_option' => t('None (original image)'),
        'default' => '',
      ),
      'cloud_zoom_tint_color' => array(
        'key' => 'tintColor',
        'type' => 'textfield',
        'title' => t('Tint Color'),
        'description' => t('Color to use for the tint effect'),
        'default' => '#FFF',
      ),
      'cloud_zoom_tint_opacity' => array(
        'key' => 'tintOpacity',
        'type' => 'textfield',
        'title' => t('Tint Opacity'),
        'description' => t('Opacity of tint 0-1. If zero, no tint will be visible.'),
        'default' => '0.25',
      ),
      'cloud_zoom_animation_time' => array(
        'key' => 'animationTime',
        'type' => 'textfield',
        'title' => t('Animation Time'),
        'description' => t('Duration of the animation effects in milliseconds.'),
        'default' => '500',
      ),
      'cloud_zoom_lens_class' => array(
        'key' => 'lensClass',
        'type' => 'textfield',
        'title' => t('Lens Class'),
        'description' => t('CSS class to use for lens.'),
        'default' => 'cloudzoom-lens',
      ),
      'cloud_zoom_zoom_position' => array(
        'key' => 'zoomPosition',
        'type' => 'select',
        'title' => t('Zoom Position'),
        'options' => array(
          '0' => t('Top Center'),
          '1' => t('Top Right'),
          '2' => t('Top Right Corner'),
          '3' => t('Right Top'),
          '4' => t('Right Center'),
          '5' => t('Right Bottom'),
          '6' => t('Bottom Right Corner'),
          '7' => t('Bottom Right'),
          '8' => t('Bottom Center'),
          '9' => t('Bottom Left'),
          '10' => t('Bottom Left Corner'),
          '11' => t('Left Bottom'),
          '12' => t('Left Center'),
          '13' => t('Left Top'),
          '14' => t('Top Left'),
          '15' => t('Top Left Corner'),
        ),
        'default' => '3',
      ),
      'cloud_zoom_zoom_offset_x' => array(
        'key' => 'zoomOffsetX',
        'type' => 'textfield',
        'title' => t('Zoom Offset X'),
        'default' => '15',
      ),
      'cloud_zoom_zoom_offset_y' => array(
        'key' => 'zoomOffsetY',
        'type' => 'textfield',
        'title' => t('Zoom Offset Y'),
        'default' => '0',
      ),
      'cloud_zoom_zoom_fly_out' => array(
        'key' => 'zoomFlyOut',
        'type' => 'checkbox',
        'title' => t('Zoom Fly Out'),
        'default' => TRUE,
      ),
      'cloud_zoom_zoom_class' => array(
        'key' => 'zoomClass',
        'type' => 'textfield',
        'title' => t('Zoom Class'),
        'default' => 'cloudzoom-zoom',
      ),
      'cloud_zoom_zoom_inside_class' => array(
        'key' => 'zoomInsideClass',
        'type' => 'textfield',
        'title' => t('Zoom Inside Class'),
        'default' => 'cloudzoom-zoom-inside',
      ),
      'cloud_zoom_zoom_size_mode' => array(
        'key' => 'zoomSizeMode',
        'type' => 'select',
        'title' => t('Zoom Size Mode'),
        'options' => array(
          'lens' => t('Lens'),
          'zoom' => t('Zoom'),
          'full' => t('Full'),
          'image' => t('Image'),
        ),
        'default' => 'lens',
      ),
      'cloud_zoom_caption_source' => array(
        'key' => 'captionSource',
        'type' => 'textfield',
        'title' => t('Caption Source'),
        'default' => 'title',
      ),
      'cloud_zoom_caption_type' => array(
        'key' => 'captionType',
        'type' => 'select',
        'title' => t('Caption Type'),
        'options' => array(
          'attr' => 'attr',
          'html' => 'html',
        ),
        'default' => 'attr',
      ),
      'cloud_zoom_caption_position' => array(
        'key' => 'captionPosition',
        'type' => 'select',
        'title' => t('Caption Position'),
        'options' => array(
          'top' => t('Top'),
          'bottom' => t('Bottom'),
        ),
        'default' => 'top',
      ),
      'cloud_zoom_variable_magnification' => array(
        'key' => 'variableMagnification',
        'type' => 'checkbox',
        'title' => t('Variable Magnification'),
        'default' => TRUE,
      ),
      'cloud_zoom_start_magnification' => array(
        'key' => 'startMagnification',
        'type' => 'textfield',
        'title' => t('Start Magnification'),
        'default' => 'auto',
      ),
      'cloud_zoom_min_magnification' => array(
        'key' => 'minMagnification',
        'type' => 'textfield',
        'title' => t('Min Magnification'),
        'default' => 'auto',
      ),
      'cloud_zoom_max_magnification' => array(
        'key' => 'maxMagnification',
        'type' => 'textfield',
        'title' => t('Max Magnification'),
        'default' => 'auto',
      ),
      'cloud_zoom_easing' => array(
        'key' => 'easing',
        'type' => 'textfield',
        'title' => t('Easing'),
        'default' => '8',
      ),
      'cloud_zoom_lazy_load_zoom' => array(
        'key' => 'lazyLoadZoom',
        'type' => 'checkbox',
        'title' => t('Lazy Load Zoom'),
        'default' => FALSE,
      ),
      'cloud_zoom_mouse_trigger_event' => array(
        'key' => 'mouseTriggerEvent',
        'type' => 'select',
        'title' => t('Mouse Trigger Event'),
        'options' => array(
          'mousemove' => t('Mouse Move'),
          'click' => t('Click'),
        ),
        'default' => 'mousemove',
      ),
      'cloud_zoom_disable_zoom' => array(
        'key' => 'disableZoom',
        'type' => 'select',
        'title' => t('Disable Zoom'),
        'options' => array(
          'false' => t('No'),
          'true' => t('Yes'),
          'auto' => t('Auto'),
          'min_width' => t('Minimum Width'),
        ),
        'default' => FALSE,
      ),
      'cloud_zoom_disable_on_screen_width' => array(
        'key' => 'disableOnScreenWidth',
        'type' => 'textfield',
        'title' => t('Disable On Screen Width'),
        'default' => '0',
      ),
      'cloud_zoom_gallery_fade' => array(
        'key' => 'galleryFade',
        'type' => 'checkbox',
        'title' => t('Gallery Fade'),
        'default' => TRUE,
      ),
      'cloud_zoom_gallery_hover_delay' => array(
        'key' => 'galleryHoverDelay',
        'type' => 'textfield',
        'title' => t('Gallery Hover Delay'),
        'default' => '200',
      ),
      'cloud_zoom_perma_zoom' => array(
        'key' => 'permaZoom',
        'type' => 'checkbox',
        'title' => t('Perma Zoom'),
        'default' => FALSE,
      ),
      'cloud_zoom_zoom_width' => array(
        'key' => 'zoomWidth',
        'type' => 'textfield',
        'title' => t('Zoom Width'),
        'default' => '0',
      ),
      'cloud_zoom_zoom_height' => array(
        'key' => 'zoomHeight',
        'type' => 'textfield',
        'title' => t('Zoom Height'),
        'default' => '0',
      ),
      'cloud_zoom_lens_width' => array(
        'key' => 'lensWidth',
        'type' => 'textfield',
        'title' => t('Lens Width'),
        'default' => '0',
      ),
      'cloud_zoom_lens_height' => array(
        'key' => 'lensHeight',
        'type' => 'textfield',
        'title' => t('Lens Height'),
        'default' => '0',
      ),
      'cloud_zoom_hover_intent_delay' => array(
        'key' => 'hoverIntentDelay',
        'type' => 'textfield',
        'title' => t('Hover Intent Delay'),
        'default' => '0',
      ),
      'cloud_zoom_auto_inside' => array(
        'key' => 'autoInside',
        'type' => 'textfield',
        'title' => t('Auto Inside'),
        'default' => '0',
      ),
      'cloud_zoom_touch_start_delay' => array(
        'key' => 'touchStartDelay',
        'type' => 'textfield',
        'title' => t('Touch Start Delay'),
        'default' => '0',
      ),
    );
  }

  return $settings;
}

/**
 * Implementation of hook_field_formatter().
 */
function cloud_zoom_field_formatter_info() {
  $formatter_settings = _cloud_zoom_array_column(_cloud_zoom_settings(), 'default', TRUE);

  $formatters = array(
    'cloud_zoom' => array(
      'label' => t('Cloud Zoom'),
      'field types' => array('image'),
      'settings' => $formatter_settings,
    ),
    'cloud_zoom_gallery' => array(
      'label' => t('Cloud Zoom Gallery'),
      'field types' => array('image'),
      'settings' => $formatter_settings + array(
        'cloud_zoom_thumbnail_style' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cloud_zoom_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  foreach (_cloud_zoom_settings() as $key => $setting){
    $element[$key] = _cloud_zoom_map_options($setting, array(
      '#type' => 'type',
      '#title' => 'title',
      '#description' => 'description',
      '#options' => 'options',
      '#empty_option' => 'empty_option',
    )) + array('#default_value' => $settings[$key]);
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cloud_zoom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that define
  // their styles in code.
  $summary[] = t('Display image style: @style', array(
    '@style' => isset($image_styles[$settings['cloud_zoom_display_style']]) ?
    $image_styles[$settings['cloud_zoom_display_style']] : 'original',
  ));
  $summary[] = t('Zoomed image style: @style', array(
    '@style' => isset($image_styles[$settings['cloud_zoom_zoom_style']]) ?
    $image_styles[$settings['cloud_zoom_zoom_style']] : 'original',
  ));
  if ($display['type'] == 'cloud_zoom_gallery') {
    $summary[] = t('Thumbnail image style: @style', array(
      '@style' => isset($image_styles[$settings['cloud_zoom_thumbnail_style']]) ?
      $image_styles[$settings['cloud_zoom_thumbnail_style']] : 'original',
    ));
  }

  $cloud_zoom_settings = _cloud_zoom_settings();
  $summary = array();
  switch ($display['type']) {
    case 'cloud_zoom':
      foreach ($settings as $key => $setting) {
        switch($cloud_zoom_settings[$key]['type']){
          case 'textfield':
            break;
          case 'select':
            $setting = $cloud_zoom_settings[$key]['options'][$setting];
            break;
          case 'checkbox':
            $setting = ($setting) ? 'Yes' : 'No';
            break;
        }
        $summary[] = t('@key: @setting', array(
          '@key' => $cloud_zoom_settings[$key]['title'],
          '@setting' => $setting,
        ));
      }
      break;

  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function cloud_zoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $display_style = $display['settings']['cloud_zoom_display_style'];
  $zoom_style = $display['settings']['cloud_zoom_zoom_style'];
  $settings = &$display['settings'];

  switch($display['type']) {
    case 'cloud_zoom':
      // Build elements for each item
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'cloud_zoom_image',
          '#item' => $item,
          '#settings' =>_cloud_zoom_map_options($settings, _cloud_zoom_array_column(_cloud_zoom_settings(), 'key', TRUE)),
        );
      }
    break;
    case 'cloud_zoom_gallery':
      $id = drupal_html_id('cloud-zoom-gallery');
      $thumbnail_style = $display['settings']['cloud_zoom_thumbnail_style'];
      $gallery_image = $items[0];
      $gallery_image['attributes']['id'] = $id;
      $gallery['gallery'] = array(
        '#theme' => 'cloud_zoom_image',
        '#item' => $gallery_image,
        '#image_style' => $display_style,
        '#zoom_style' => $zoom_style,
      );
      if(count($items) > 1) {
        foreach ($items as $delta => $item) {
          $zoom_image = image_style_url($zoom_style, $item['uri']);
          $item['attributes']['data-cloudzoom'] = _cloud_zoom_data_encode(
            array(
              'useZoom' => '#' . $id,
              'image' => image_style_url($display_style, $item['uri']),
              'zoomImage' => $zoom_image,
              'galleryEvent' => 'mouseover',
            )
          );
          $item['attributes']['class'][] =  'cloudzoom-gallery';
          $gallery[$delta] = array(
            '#theme' => 'image_formatter',
            '#item' => $item,
            '#image_style' => $thumbnail_style,
          );
        }
      }
      $element[] = $gallery;
    break;
  }

  return $element;
}

function cloud_zoom_add_library(){
  $path = libraries_get_path('jquery.actual');
  if (file_exists($path . '/jquery.actual.js')) drupal_add_js($path . '/jquery.actual.js');
  drupal_add_library('system', 'effects.scale');
  // Add the cloud zoom JS and CSS
  $library_path = libraries_get_path('cloudzoom');
  $module_path = drupal_get_path('module', 'cloud_zoom');
  drupal_add_js($library_path . '/cloudzoom.js');
  drupal_add_js($module_path .'/cloud_zoom.js');
  drupal_add_css($library_path . '/cloudzoom.css');
}

/**
 * Implementation of hook_theme().
 */
function cloud_zoom_theme() {
  // Define a base theme handler
  return array(
    'cloud_zoom_image' => array(
      'variables' => array('item' => NULL, 'settings' => NULL),
    ),
  );
}

/**
 * Theme handler for the cloud_zoom effect
 */
function theme_cloud_zoom_image($variables) {
  cloud_zoom_add_library();

  $item = &$variables['item'];

  $zoom_path = $variables['zoom_style'] ? image_style_url($variables['zoom_style'], $item['uri']) : file_create_url($item['uri']);

  $item['attributes']['class'][] = 'cloudzoom';
  $item['attributes']['data-cloudzoom'] = _cloud_zoom_data_encode(
    $variables['settings'] +
    array(
      'zoomImage' => $zoom_path,
    )
  );

  return theme('image_formatter', $variables);
}

function _cloud_zoom_data_encode($settings) {
  $data = array();
  foreach ($settings as $key => $setting) {
    if(is_numeric($setting)){
      $data[] = "$key:$setting";
    }
    else {
      $data[] = "$key:'$setting'";
    }
  }
  return implode($data, ', ');
}

function _cloud_zoom_array_column($array, $columnKey, $indexKey = null) {
  $result = array();
  foreach ($array as $arrayIndex => $subArray) {
    if (is_null($indexKey) && array_key_exists($columnKey, $subArray)) {
      $result[] = is_object($subArray) ? $subArray->$columnKey : $subArray[$columnKey];
    } elseif ($indexKey === TRUE) {
      if (is_null($columnKey)) {
        $result[$arrayIndex] = $subArray;
      } elseif (array_key_exists($columnKey, $subArray)) {
        $result[$arrayIndex] = is_object($subArray)?$subArray->$columnKey: $subArray[$columnKey];
      }
    } elseif (array_key_exists($indexKey, $subArray)) {
      if (is_null($columnKey)) {
        $index = is_object($subArray)?$subArray->$indexKey: $subArray[$indexKey];
        $result[$index] = $subArray;
      } elseif (array_key_exists($columnKey, $subArray)) {
        $index = is_object($subArray)?$subArray->$indexKey: $subArray[$indexKey];
        $result[$index] = is_object($subArray)?$subArray->$columnKey: $subArray[$columnKey];
      }
    }
  }
  return $result;
}

function _cloud_zoom_map_options(&$parameters, $option_map) {
  $options = array();
  if(is_array($parameters)) {
    foreach($option_map as $key => $value) {
      if(isset($parameters[$value]) && !is_null($parameters[$value])) {
        $options[$key] = &$parameters[$value];
      }
    }
  }
  else if(is_object($parameters)) {
    foreach($option_map as $key => $value) {
      if(property_exists($parameters, $value) && !is_null($parameters->$value)) {
        $options[$key] = &$parameters->$value;
      }
    }
  }

  return $options;
}
